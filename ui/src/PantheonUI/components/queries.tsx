/* Generated by restful-react - and fixed manually :( */
/* We need to fix the openapi specsâ€¦ */

import React from "react";
import { Get, GetProps, Mutate, MutateProps } from "restful-react";

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export interface AttributeResponse {
  attribute: string;
  dimension: string;
  hierarchy: string;
  level: string;
  metadata: { [key: string]: string };
  ref: string;
  schema?: string;
}

export interface BackendConfigListResponse {
  data: BackendConfig[];
  page: Page;
}

export interface BackendConfig {
  backendType: string;
  catalogId?: string;
  description?: string;
  id?: string;
  name?: string;
  params: { [key: string]: string };
}

export interface Boolean {
  type?: "Boolean";
  value?: boolean;
}

export interface CatalogListResponse {
  data: Catalog[];
  page: Page;
}

export interface Catalog {
  backendConfigId?: string;
  description?: string;
  id?: string;
  name?: string;
}

export interface CompatibilityQuery {
  constraints?: string[];
  customReference?: string;
  query: PantheonQuery;
  queryId?: string;
}

export interface CompatibilityResponse {
  dimensions: AttributeResponse[];
  measures: MeasureResponse[];
}

export interface ConnectionTestResult {
  message?: string;
  valid: boolean;
}

export interface DataSourceListResponse {
  data: DataSource[];
  page: Page;
}

export interface DataSourceProductListResponse {
  data: DataSourceProduct[];
  page: Page;
}

export interface DataSourceProductProperty {
  name: string;
  type: string;
}

export interface DataSourceProduct {
  className?: string;
  description?: string;
  id?: string;
  isBundled: boolean;
  name: string;
  productRoot: string;
  properties: DataSourceProductProperty[];
  type: string;
}

export interface DataSource {
  catalogId?: string;
  dataSourceProductId: string;
  description?: string;
  id?: string;
  name: string;
  properties: { [key: string]: string };
}

export interface Date {
  type?: "Date";
  value?: string;
}

export interface Decimal {
  type?: "Decimal";
  value?: number;
}

export interface Double {
  type?: "Double";
  value?: number;
}

export interface Integer {
  type?: "Integer";
  value?: number;
}

export type Literal = TypedLiteral | UnTypedLiteral;

export interface Long {
  type?: "Long";
  value?: number;
}

export interface MeasureMetadata {
  metadata: { [key: string]: string };
  ref: string;
}

export interface MeasureResponse {
  aggregate?: any;
  measure: string;
  metadata: { [key: string]: string };
  ref: string;
  schema?: string;
}

export interface NativeQuery {
  customReference?: string;
  query: string;
  queryId?: string;
}

export interface NestedAttributeResponse {
  attribute: string;
  metadata: { [key: string]: string };
  ref: string;
}

export interface NestedCompatibilityResponse {
  dimensions: NestedSchemaScopedAttributesResponse[];
  measures: NestedSchemaScopedMeasuresResponse[];
}

export interface NestedDimensionResponse {
  children: NestedHierarchyResponse[];
  dimension: string;
}

export interface NestedHierarchyResponse {
  children: NestedLevelResponse[];
  hierarchy: string;
}

export interface NestedLevelResponse {
  children: NestedAttributeResponse[];
  level: string;
}

export interface NestedMeasureResponse {
  aggregate?: any;
  measure: string;
  metadata: { [key: string]: string };
  ref: string;
}

export interface NestedSchemaScopedAttributesResponse {
  children: NestedDimensionResponse[];
  schema?: string;
}

export interface NestedSchemaScopedMeasuresResponse {
  children: NestedMeasureResponse[];
  schema?: string;
}

export interface Null {
  type?: "";
}

export interface OrderedColumn {
  name: string;
  order: "Asc" | "Desc";
}

export interface Page {
  current: number;
  itemCount: number;
  itemsPerPage: number;
}

export interface PantheonQuery {
  aggregateFilter?: Predicate;
  columns?: string[];
  columnsTopN?: TopN;
  filter?: Predicate;
  limit?: number;
  measures?: string[];
  offset?: number;
  orderBy?: OrderedColumn[];
  rows?: string[];
  rowsTopN?: TopN;
  type: "Aggregate" | "Record" | "Sql" | "Native";
}

export interface PermissionTO {
  id: string;
  principalId: string;
  role: string;
}

// tslint:disable-next-line:no-empty-interface
export interface Predicate {}

export interface QueryHistoryListResponse {
  data: QueryHistoryRecord[];
  page: Page;
}

// tslint:disable-next-line:no-empty-interface
export interface QueryHistoryRecord {}

export interface QueryParams {
  _customReference?: string;
  _page?: number;
  _pageSize?: number;
  _queryId?: string;
}

export interface Query {
  aggregateFilter?: Predicate;
  columns?: string[];
  columnsTopN?: TopN;
  filter?: Predicate;
  limit?: number;
  measures?: string[];
  offset?: number;
  orderBy?: OrderedColumn[];
  rows?: string[];
  rowsTopN?: TopN;
  sql?: string;
  type: "Aggregate" | "Record" | "Sql" | "Native";
}

export interface QueryReqWithRefs {
  aggregateFilter?: Predicate;
  columns?: string[];
  columnsTopN?: TopN;
  customReference?: string;
  filter?: Predicate;
  limit?: number;
  measures?: string[];
  offset?: number;
  orderBy?: OrderedColumn[];
  queryId?: string;
  rows?: string[];
  rowsTopN?: TopN;
  sql?: string;
  type: "Aggregate" | "Record" | "Sql" | "Native";
}

export interface Ref {
  ref: string;
}

export interface Response {
  columns: ResponseMetaData[];
  measureHeaders: Ref[];
  measures: MeasureMetadata[];
  rows: string[][];
}

export interface ResponseMetaData {
  ref: string;
  values: string;
  primitive: "string" | "number";
  measure: "string";
}

export interface Endpoint {
  catalogId: string;
  description?: string;
  id: string;
  name?: string;
  query: Query;
  schemaId: string;
}

export interface EndpointListResponse {
  data: EndpointResponse[];
  page: Page;
}

export interface EndpointResponse {
  savedQuery: Endpoint;
}

export interface SchemaListResponse {
  data: Schema[];
  page: Page;
}

export interface Schema {
  backendConfigId?: string;
  catalogId: string;
  description: string;
  id: string;
  name: string;
  psl: string;
}

export interface String {
  type?: "String";
  value?: string;
}

export interface TableResponse {
  columns: string[];
  name: string;
}

export interface Timestamp {
  type?: "Timestamp";
  value?: string;
}

export interface TopN {
  dimensions: string[];
  n: number;
  orderBy: OrderedColumn[];
}

// tslint:disable-next-line:ban-types
export type TypedLiteral = Date | Timestamp | Boolean | String | Integer | Long | Double | Decimal | Null;

export type UnTypedLiteral = string | boolean | number;

export interface ListCatalogsQueryParams {
  page?: number;
  pageSize?: number;
}

export type ListCatalogsProps = Omit<GetProps<CatalogListResponse, unknown, ListCatalogsQueryParams>, "path">;

// List catalogs
export const ListCatalogs = (props: ListCatalogsProps) => (
  <Get<CatalogListResponse, unknown, ListCatalogsQueryParams> path={`/catalogs`} {...props} />
);

export type CreateCatalogProps = Omit<MutateProps<Catalog, unknown, void, Catalog>, "path" | "verb">;

// Create catalog
export const CreateCatalog = (props: CreateCatalogProps) => (
  <Mutate<Catalog, unknown, void, Catalog> verb="POST" path={`/catalogs`} {...props} />
);

export interface ListBackendConfigsQueryParams {
  page?: number;
  pageSize?: number;
}

export type ListBackendConfigsProps = Omit<
  GetProps<BackendConfigListResponse, unknown, ListBackendConfigsQueryParams>,
  "path"
> & { catalogId: string };

// List backend configs
export const ListBackendConfigs = ({ catalogId, ...props }: ListBackendConfigsProps) => (
  <Get<BackendConfigListResponse, unknown, ListBackendConfigsQueryParams>
    path={`/catalogs/${catalogId}/backendConfigs`}
    {...props}
  />
);

export type CreateBackendConfigProps = Omit<
  MutateProps<BackendConfig, unknown, void, BackendConfig>,
  "path" | "verb"
> & { catalogId: string };

// Create new backend config
export const CreateBackendConfig = ({ catalogId, ...props }: CreateBackendConfigProps) => (
  <Mutate<BackendConfig, unknown, void, BackendConfig>
    verb="POST"
    path={`/catalogs/${catalogId}/backendConfigs`}
    {...props}
  />
);

export type DeleteBackendConfigProps = Omit<MutateProps<void, unknown, void, void>, "path" | "verb"> & {
  catalogId: string;
};

// Delete backend config
export const DeleteBackendConfig = ({ catalogId, ...props }: DeleteBackendConfigProps) => (
  <Mutate<void, unknown, void, void> verb="DELETE" path={`/catalogs/${catalogId}/backendConfigs`} {...props} />
);

export type FindBackendConfigProps = Omit<GetProps<BackendConfig, unknown, void>, "path"> & {
  catalogId: string;
  id: string;
};

// Get backend config
export const FindBackendConfig = ({ catalogId, id, ...props }: FindBackendConfigProps) => (
  <Get<BackendConfig, unknown, void> path={`/catalogs/${catalogId}/backendConfigs/${id}`} {...props} />
);

export type UpdateBackendConfigProps = Omit<
  MutateProps<BackendConfig, unknown, void, BackendConfig>,
  "path" | "verb"
> & { catalogId: string; id: string };

// Update backend config
export const UpdateBackendConfig = ({ catalogId, id, ...props }: UpdateBackendConfigProps) => (
  <Mutate<BackendConfig, unknown, void, BackendConfig>
    verb="PUT"
    path={`/catalogs/${catalogId}/backendConfigs/${id}`}
    {...props}
  />
);

export interface ListDataSourcesQueryParams {
  page?: number;
  pageSize?: number;
}

export type ListDataSourcesProps = Omit<
  GetProps<DataSourceListResponse, unknown, ListDataSourcesQueryParams>,
  "path"
> & { catalogId: string };

// List data dources
export const ListDataSources = ({ catalogId, ...props }: ListDataSourcesProps) => (
  <Get<DataSourceListResponse, unknown, ListDataSourcesQueryParams>
    path={`/catalogs/${catalogId}/dataSources`}
    {...props}
  />
);

export type CreateDataSourceProps = Omit<MutateProps<DataSource, unknown, void, DataSource>, "path" | "verb"> & {
  catalogId: string;
};

// Create data source
export const CreateDataSource = ({ catalogId, ...props }: CreateDataSourceProps) => (
  <Mutate<DataSource, unknown, void, DataSource> verb="POST" path={`/catalogs/${catalogId}/dataSources`} {...props} />
);

export type DeleteDataSourceProps = Omit<MutateProps<void, unknown, void, void>, "path" | "verb"> & {
  catalogId: string;
};

// Delete data source
export const DeleteDataSource = ({ catalogId, ...props }: DeleteDataSourceProps) => (
  <Mutate<void, unknown, void, void> verb="DELETE" path={`/catalogs/${catalogId}/dataSources`} {...props} />
);

export type FindDataSourceProps = Omit<GetProps<DataSource, unknown, void>, "path"> & {
  catalogId: string;
  dsId: string;
};

// Get data source
export const FindDataSource = ({ catalogId, dsId, ...props }: FindDataSourceProps) => (
  <Get<DataSource, unknown, void> path={`/catalogs/${catalogId}/dataSources/${dsId}`} {...props} />
);

export type UpdateDataSourceProps = Omit<MutateProps<DataSource, unknown, void, DataSource>, "path" | "verb"> & {
  catalogId: string;
  dsId: string;
};

// Update data source
export const UpdateDataSource = ({ catalogId, dsId, ...props }: UpdateDataSourceProps) => (
  <Mutate<DataSource, unknown, void, DataSource>
    verb="PUT"
    path={`/catalogs/${catalogId}/dataSources/${dsId}`}
    {...props}
  />
);

export type GetTablesFromDataSourceTableProps = Omit<GetProps<TableResponse[], unknown, void>, "path"> & {
  catalogId: string;
  dsId: string;
};

// List data source tables
export const GetTablesFromDataSourceTable = ({ catalogId, dsId, ...props }: GetTablesFromDataSourceTableProps) => (
  <Get<TableResponse[], unknown, void> path={`/catalogs/${catalogId}/dataSources/${dsId}/tables`} {...props} />
);

export type TestConnectionDataSourceProps = Omit<GetProps<ConnectionTestResult, unknown, void>, "path"> & {
  catalogId: string;
  dsId: string;
};

// Test data source connection
export const TestConnectionDataSource = ({ catalogId, dsId, ...props }: TestConnectionDataSourceProps) => (
  <Get<ConnectionTestResult, unknown, void>
    path={`/catalogs/${catalogId}/dataSources/${dsId}/testConnection`}
    {...props}
  />
);

export type ListPermissionsDataSourceProps = Omit<GetProps<PermissionTO[], unknown, void>, "path"> & {
  catalogId: string;
  resId: string;
};

// List data source permissions
export const ListPermissionsDataSource = ({ catalogId, resId, ...props }: ListPermissionsDataSourceProps) => (
  <Get<PermissionTO[], unknown, void> path={`/catalogs/${catalogId}/dataSources/${resId}/permissions`} {...props} />
);

export type CreatePermissionDataSourceProps = Omit<
  MutateProps<PermissionTO, unknown, void, PermissionTO>,
  "path" | "verb"
> & { catalogId: string; resId: string };

// Create data source permission
export const CreatePermissionDataSource = ({ catalogId, resId, ...props }: CreatePermissionDataSourceProps) => (
  <Mutate<PermissionTO, unknown, void, PermissionTO>
    verb="POST"
    path={`/catalogs/${catalogId}/dataSources/${resId}/permissions`}
    {...props}
  />
);

export type DeletePermissionDataSourceProps = Omit<MutateProps<void, unknown, void, void>, "path" | "verb"> & {
  catalogId: string;
  resId: string;
};

// Delete data source permission
export const DeletePermissionDataSource = ({ catalogId, resId, ...props }: DeletePermissionDataSourceProps) => (
  <Mutate<void, unknown, void, void>
    verb="DELETE"
    path={`/catalogs/${catalogId}/dataSources/${resId}/permissions`}
    {...props}
  />
);

export type FindPermissionDataSourceProps = Omit<GetProps<PermissionTO, unknown, void>, "path"> & {
  catalogId: string;
  resId: string;
  id: string;
};

// Get data source permission
export const FindPermissionDataSource = ({ catalogId, resId, id, ...props }: FindPermissionDataSourceProps) => (
  <Get<PermissionTO, unknown, void> path={`/catalogs/${catalogId}/dataSources/${resId}/permissions/${id}`} {...props} />
);

export type UpdatePermissionDataSourceProps = Omit<
  MutateProps<PermissionTO, unknown, void, PermissionTO>,
  "path" | "verb"
> & { catalogId: string; resId: string; id: string };

// Update data source permission
export const UpdatePermissionDataSource = ({ catalogId, resId, id, ...props }: UpdatePermissionDataSourceProps) => (
  <Mutate<PermissionTO, unknown, void, PermissionTO>
    verb="PUT"
    path={`/catalogs/${catalogId}/dataSources/${resId}/permissions/${id}`}
    {...props}
  />
);

export interface ListEndpointsQueryParams {
  page?: number;
  pageSize?: number;
}

export type ListEndpointsProps = Omit<GetProps<EndpointListResponse, unknown, ListEndpointsQueryParams>, "path"> & {
  catalogId: string;
};

// List endpoints
export const ListEndpoints = ({ catalogId, ...props }: ListEndpointsProps) => (
  <Get<EndpointListResponse, unknown, ListEndpointsQueryParams>
    path={`/catalogs/${catalogId}/endpoints`}
    {...props}
  />
);

export type CreateEndpointProps = Omit<MutateProps<Endpoint, unknown, void, Endpoint>, "path" | "verb"> & {
  catalogId: string;
};

// Create endpoint
export const CreateEndpoint = ({ catalogId, ...props }: CreateEndpointProps) => (
  <Mutate<Endpoint, unknown, void, Endpoint> verb="POST" path={`/catalogs/${catalogId}/endpoints`} {...props} />
);

export type ListEndpointPermissionsProps = Omit<GetProps<PermissionTO[], unknown, void>, "path"> & {
  catalogId: string;
  resId: string;
};

// List endpoint permissions
export const ListEndpointPermissions = ({ catalogId, resId, ...props }: ListEndpointPermissionsProps) => (
  <Get<PermissionTO[], unknown, void> path={`/catalogs/${catalogId}/endpoints/${resId}/permissions`} {...props} />
);

export type CreateEndpointPermissionProps = Omit<
  MutateProps<PermissionTO, unknown, void, PermissionTO>,
  "path" | "verb"
> & { catalogId: string; resId: string };

// Create endpoint permission
export const CreateEndpointPermission = ({ catalogId, resId, ...props }: CreateEndpointPermissionProps) => (
  <Mutate<PermissionTO, unknown, void, PermissionTO>
    verb="POST"
    path={`/catalogs/${catalogId}/endpoints/${resId}/permissions`}
    {...props}
  />
);

export type DeleteEndpointPermissionProps = Omit<MutateProps<void, unknown, void, void>, "path" | "verb"> & {
  catalogId: string;
  resId: string;
};

// Delete endpoint permission
export const DeleteEndpointPermission = ({ catalogId, resId, ...props }: DeleteEndpointPermissionProps) => (
  <Mutate<void, unknown, void, void>
    verb="DELETE"
    path={`/catalogs/${catalogId}/endpoints/${resId}/permissions`}
    {...props}
  />
);

export type FindEndpointPermissionProps = Omit<GetProps<PermissionTO, unknown, void>, "path"> & {
  catalogId: string;
  resId: string;
  id: string;
};

// Get endpoint permission
export const FindEndpointPermission = ({ catalogId, resId, id, ...props }: FindEndpointPermissionProps) => (
  <Get<PermissionTO, unknown, void>
    path={`/catalogs/${catalogId}/endpoints/${resId}/permissions/${id}`}
    {...props}
  />
);

export type UpdateEndpointPermissionProps = Omit<
  MutateProps<PermissionTO, unknown, void, PermissionTO>,
  "path" | "verb"
> & { catalogId: string; resId: string; id: string };

// Update endpoint permission
export const UpdateEndpointPermission = ({ catalogId, resId, id, ...props }: UpdateEndpointPermissionProps) => (
  <Mutate<PermissionTO, unknown, void, PermissionTO>
    verb="PUT"
    path={`/catalogs/${catalogId}/endpoints/${resId}/permissions/${id}`}
    {...props}
  />
);

export type DeleteEndpointProps = Omit<MutateProps<void, unknown, void, void>, "path" | "verb"> & { catalogId: string };

// Delete endpoint
export const DeleteEndpoint = ({ catalogId, ...props }: DeleteEndpointProps) => (
  <Mutate<void, unknown, void, void> verb="DELETE" path={`/catalogs/${catalogId}/endpoints`} {...props} />
);

export type FindEndpointProps = Omit<GetProps<Endpoint, unknown, void>, "path"> & { catalogId: string; sqId: string };

// Get endpoint
export const FindEndpoint = ({ catalogId, sqId, ...props }: FindEndpointProps) => (
  <Get<Endpoint, unknown, void> path={`/catalogs/${catalogId}/endpoints/${sqId}`} {...props} />
);

export type UpdateEndpointProps = Omit<MutateProps<Endpoint, unknown, void, Endpoint>, "path" | "verb"> & {
  catalogId: string;
  sqId: string;
};

// Update endpoint
export const UpdateEndpoint = ({ catalogId, sqId, ...props }: UpdateEndpointProps) => (
  <Mutate<Endpoint, unknown, void, Endpoint>
    verb="PUT"
    path={`/catalogs/${catalogId}/endpoints/${sqId}`}
    {...props}
  />
);

export type ExecuteEndpointProps = Omit<
  MutateProps<Response, unknown, void, QueryParams & { [key: string]: Literal }>,
  "path" | "verb"
> & { catalogId: string; sqId: string };

// Execute endpoint
export const ExecuteEndpoint = ({ catalogId, sqId, ...props }: ExecuteEndpointProps) => (
  <Mutate<Response, unknown, void, QueryParams & { [key: string]: Literal }>
    verb="POST"
    path={`/catalogs/${catalogId}/endpoints/${sqId}/execute`}
    {...props}
  />
);

export interface ListSchemasQueryParams {
  page?: number;
  pageSize?: number;
}

export type ListSchemasProps = Omit<GetProps<SchemaListResponse, unknown, ListSchemasQueryParams>, "path"> & {
  catalogId: string;
};

// List schemas
export const ListSchemas = ({ catalogId, ...props }: ListSchemasProps) => (
  <Get<SchemaListResponse, unknown, ListSchemasQueryParams> path={`/catalogs/${catalogId}/schemas`} {...props} />
);

export type CreateSchemaProps = Omit<MutateProps<Schema, unknown, void, Schema>, "path" | "verb"> & {
  catalogId: string;
};

// Create schema
export const CreateSchema = ({ catalogId, ...props }: CreateSchemaProps) => (
  <Mutate<Schema, unknown, void, Schema> verb="POST" path={`/catalogs/${catalogId}/schemas`} {...props} />
);

export type ListPermissionsSchemasProps = Omit<GetProps<PermissionTO[], unknown, void>, "path"> & {
  catalogId: string;
  resId: string;
};

// List schema permissions
export const ListPermissionsSchemas = ({ catalogId, resId, ...props }: ListPermissionsSchemasProps) => (
  <Get<PermissionTO[], unknown, void> path={`/catalogs/${catalogId}/schemas/${resId}/permissions`} {...props} />
);

export type CreatePermissionSchemaProps = Omit<
  MutateProps<PermissionTO, unknown, void, PermissionTO>,
  "path" | "verb"
> & { catalogId: string; resId: string };

// Create schema permission
export const CreatePermissionSchema = ({ catalogId, resId, ...props }: CreatePermissionSchemaProps) => (
  <Mutate<PermissionTO, unknown, void, PermissionTO>
    verb="POST"
    path={`/catalogs/${catalogId}/schemas/${resId}/permissions`}
    {...props}
  />
);

export type DeletePermissionSchemaProps = Omit<MutateProps<void, unknown, void, void>, "path" | "verb"> & {
  catalogId: string;
  resId: string;
};

// Delete schema permission
export const DeletePermissionSchema = ({ catalogId, resId, ...props }: DeletePermissionSchemaProps) => (
  <Mutate<void, unknown, void, void>
    verb="DELETE"
    path={`/catalogs/${catalogId}/schemas/${resId}/permissions`}
    {...props}
  />
);

export type FindPermissionSchemaProps = Omit<GetProps<PermissionTO, unknown, void>, "path"> & {
  catalogId: string;
  resId: string;
  id: string;
};

// Get schema permission
export const FindPermissionSchema = ({ catalogId, resId, id, ...props }: FindPermissionSchemaProps) => (
  <Get<PermissionTO, unknown, void> path={`/catalogs/${catalogId}/schemas/${resId}/permissions/${id}`} {...props} />
);

export type UpdatePermissionSchemaProps = Omit<
  MutateProps<PermissionTO, unknown, void, PermissionTO>,
  "path" | "verb"
> & { catalogId: string; resId: string; id: string };

// Update schema permission
export const UpdatePermissionSchema = ({ catalogId, resId, id, ...props }: UpdatePermissionSchemaProps) => (
  <Mutate<PermissionTO, unknown, void, PermissionTO>
    verb="PUT"
    path={`/catalogs/${catalogId}/schemas/${resId}/permissions/${id}`}
    {...props}
  />
);

export type DeleteSchemaProps = Omit<MutateProps<void, unknown, void, void>, "path" | "verb"> & { catalogId: string };

// Delete schema
export const DeleteSchema = ({ catalogId, ...props }: DeleteSchemaProps) => (
  <Mutate<void, unknown, void, void> verb="DELETE" path={`/catalogs/${catalogId}/schemas`} {...props} />
);

export type FindSchemaProps = Omit<GetProps<Schema, unknown, void>, "path"> & { catalogId: string; schemaId: string };

// Get schema
export const FindSchema = ({ catalogId, schemaId, ...props }: FindSchemaProps) => (
  <Get<Schema, unknown, void> path={`/catalogs/${catalogId}/schemas/${schemaId}`} {...props} />
);

export type UpdateSchemaProps = Omit<MutateProps<Schema, unknown, void, Schema>, "path" | "verb"> & {
  catalogId: string;
  schemaId: string;
};

// Update schema
export const UpdateSchema = ({ catalogId, schemaId, ...props }: UpdateSchemaProps) => (
  <Mutate<Schema, unknown, void, Schema> verb="PUT" path={`/catalogs/${catalogId}/schemas/${schemaId}`} {...props} />
);

export type GetTablesFromSchemaTableProps = Omit<GetProps<TableResponse[], unknown, void>, "path"> & {
  catalogId: string;
  schemaId: string;
};

// List schema tables
export const GetTablesFromSchemaTable = ({ catalogId, schemaId, ...props }: GetTablesFromSchemaTableProps) => (
  <Get<TableResponse[], unknown, void> path={`/catalogs/${catalogId}/schemas/${schemaId}/tables`} {...props} />
);

export type ExecuteNativeQueryProps = Omit<MutateProps<Response, unknown, void, NativeQuery>, "path" | "verb"> & {
  catalogId: string;
  id: string;
};

// Execute native query
export const ExecuteNativeQuery = ({ catalogId, id, ...props }: ExecuteNativeQueryProps) => (
  <Mutate<Response, unknown, void, NativeQuery>
    verb="POST"
    path={`/catalogs/${catalogId}/dataSources/${id}/nativeQuery`}
    {...props}
  />
);

export interface ListQueryHistoryQueryParams {
  page?: number;
  pageSize?: number;
  customRefPattern?: string;
}

export type ListQueryHistoryProps = Omit<
  GetProps<QueryHistoryListResponse, unknown, ListQueryHistoryQueryParams>,
  "path"
> & { catalogId: string };

// List query history
export const ListQueryHistory = ({ catalogId, ...props }: ListQueryHistoryProps) => (
  <Get<QueryHistoryListResponse, unknown, ListQueryHistoryQueryParams>
    path={`/catalogs/${catalogId}/queryHistory`}
    {...props}
  />
);

export type DeleteQueryHistoryProps = Omit<MutateProps<void, unknown, void, void>, "path" | "verb"> & {
  catalogId: string;
};

// Stop running query
export const DeleteQueryHistory = ({ catalogId, ...props }: DeleteQueryHistoryProps) => (
  <Mutate<void, unknown, void, void> verb="DELETE" path={`/catalogs/${catalogId}/queryHistory`} {...props} />
);

export type GetQueryHistoryProps = Omit<GetProps<QueryHistoryRecord, unknown, void>, "path"> & {
  catalogId: string;
  queryId: string;
};

// Get query history entry
export const GetQueryHistory = ({ catalogId, queryId, ...props }: GetQueryHistoryProps) => (
  <Get<QueryHistoryRecord, unknown, void> path={`/catalogs/${catalogId}/queryHistory/${queryId}`} {...props} />
);

export type ExecuteCompatibilityProps = Omit<
  MutateProps<CompatibilityResponse, unknown, void, CompatibilityQuery>,
  "path" | "verb"
> & { catalogId: string; schemaId: string };

// Get query compatibility in plain format
export const ExecuteCompatibility = ({ catalogId, schemaId, ...props }: ExecuteCompatibilityProps) => (
  <Mutate<CompatibilityResponse, unknown, void, CompatibilityQuery>
    verb="POST"
    path={`/catalogs/${catalogId}/schemas/${schemaId}/compatibility`}
    {...props}
  />
);

export type ExecuteNestedCompatibilityProps = Omit<
  MutateProps<NestedCompatibilityResponse, unknown, void, CompatibilityQuery>,
  "path" | "verb"
> & { catalogId: string; schemaId: string };

// Get query compatibility in nested format
export const ExecuteNestedCompatibility = ({ catalogId, schemaId, ...props }: ExecuteNestedCompatibilityProps) => (
  <Mutate<NestedCompatibilityResponse, unknown, void, CompatibilityQuery>
    verb="POST"
    path={`/catalogs/${catalogId}/schemas/${schemaId}/nestedCompatibility`}
    {...props}
  />
);

export type ExecuteQueryProps = Omit<MutateProps<Response, unknown, void, QueryReqWithRefs>, "path" | "verb"> & {
  catalogId: string;
  schemaId: string;
};

// Run query on schema
export const ExecuteQuery = ({ catalogId, schemaId, ...props }: ExecuteQueryProps) => (
  <Mutate<Response, unknown, void, QueryReqWithRefs>
    verb="POST"
    path={`/catalogs/${catalogId}/schemas/${schemaId}/query`}
    {...props}
  />
);

// tslint:disable-next-line:no-empty-interface
export interface VerifySchemaResponse {}

export type VerifySchemaProps = Omit<GetProps<VerifySchemaResponse, unknown, void>, "path"> & {
  catalogId: string;
  schemaId: string;
};

// Verify schema
export const VerifySchema = ({ catalogId, schemaId, ...props }: VerifySchemaProps) => (
  <Get<VerifySchemaResponse, unknown, void> path={`/catalogs/${catalogId}/schemas/${schemaId}/verify`} {...props} />
);

export type DeleteCatalogProps = Omit<MutateProps<void, unknown, void, void>, "path" | "verb">;

// Delete catalog
export const DeleteCatalog = (props: DeleteCatalogProps) => (
  <Mutate<void, unknown, void, void> verb="DELETE" path={`/catalogs`} {...props} />
);

export type FindCatalogProps = Omit<GetProps<Catalog, unknown, void>, "path"> & { id: string };

// Get catalog
export const FindCatalog = ({ id, ...props }: FindCatalogProps) => (
  <Get<Catalog, unknown, void> path={`/catalogs/${id}`} {...props} />
);

export type UpdateCatalogProps = Omit<MutateProps<Catalog, unknown, void, Catalog>, "path" | "verb"> & { id: string };

// Update catalog
export const UpdateCatalog = ({ id, ...props }: UpdateCatalogProps) => (
  <Mutate<Catalog, unknown, void, Catalog> verb="PUT" path={`/catalogs/${id}`} {...props} />
);

export type ListPermissionsCatalogsProps = Omit<GetProps<PermissionTO[], unknown, void>, "path"> & { resId: string };

// List catalog permissions
export const ListPermissionsCatalogs = ({ resId, ...props }: ListPermissionsCatalogsProps) => (
  <Get<PermissionTO[], unknown, void> path={`/catalogs/${resId}/permissions`} {...props} />
);

export type CreatePermissionCatalogProps = Omit<
  MutateProps<PermissionTO, unknown, void, PermissionTO>,
  "path" | "verb"
> & { resId: string };

// Create catalog permission
export const CreatePermissionCatalog = ({ resId, ...props }: CreatePermissionCatalogProps) => (
  <Mutate<PermissionTO, unknown, void, PermissionTO> verb="POST" path={`/catalogs/${resId}/permissions`} {...props} />
);

export type DeletePermissionCatalogProps = Omit<MutateProps<void, unknown, void, void>, "path" | "verb"> & {
  resId: string;
};

// Delete catalog permission
export const DeletePermissionCatalog = ({ resId, ...props }: DeletePermissionCatalogProps) => (
  <Mutate<void, unknown, void, void> verb="DELETE" path={`/catalogs/${resId}/permissions`} {...props} />
);

export type FindPermissionCatalogsProps = Omit<GetProps<PermissionTO, unknown, void>, "path"> & {
  resId: string;
  id: string;
};

// Get catalog permission
export const FindPermissionCatalogs = ({ resId, id, ...props }: FindPermissionCatalogsProps) => (
  <Get<PermissionTO, unknown, void> path={`/catalogs/${resId}/permissions/${id}`} {...props} />
);

export type UpdatePermissionCatalogProps = Omit<
  MutateProps<PermissionTO, unknown, void, PermissionTO>,
  "path" | "verb"
> & { resId: string; id: string };

// Update catalog permission
export const UpdatePermissionCatalog = ({ resId, id, ...props }: UpdatePermissionCatalogProps) => (
  <Mutate<PermissionTO, unknown, void, PermissionTO>
    verb="PUT"
    path={`/catalogs/${resId}/permissions/${id}`}
    {...props}
  />
);

export interface ListDataSourceProductQueryParams {
  page?: number;
  pageSize?: number;
}

export type ListDataSourceProductProps = Omit<
  GetProps<DataSourceProductListResponse, unknown, ListDataSourceProductQueryParams>,
  "path"
>;

// List data source products
export const ListDataSourceProduct = (props: ListDataSourceProductProps) => (
  <Get<DataSourceProductListResponse, unknown, ListDataSourceProductQueryParams>
    path={`/dataSourceProducts`}
    {...props}
  />
);

export type CreateDataSourceProductProps = Omit<
  MutateProps<DataSourceProduct, unknown, void, DataSourceProduct>,
  "path" | "verb"
>;

// Create data source product
export const CreateDataSourceProduct = (props: CreateDataSourceProductProps) => (
  <Mutate<DataSourceProduct, unknown, void, DataSourceProduct> verb="POST" path={`/dataSourceProducts`} {...props} />
);

export type DeleteDataSourceProductProps = Omit<MutateProps<void, unknown, void, void>, "path" | "verb">;

// Delete data source product
export const DeleteDataSourceProduct = (props: DeleteDataSourceProductProps) => (
  <Mutate<void, unknown, void, void> verb="DELETE" path={`/dataSourceProducts`} {...props} />
);

export type FindDataSourceProductProps = Omit<GetProps<DataSourceProduct, unknown, void>, "path"> & { id: string };

// Get data source product
export const FindDataSourceProduct = ({ id, ...props }: FindDataSourceProductProps) => (
  <Get<DataSourceProduct, unknown, void> path={`/dataSourceProducts/${id}`} {...props} />
);

export type UpdateDataSourceProductProps = Omit<
  MutateProps<DataSourceProduct, unknown, void, DataSourceProduct>,
  "path" | "verb"
> & { id: string };

// Update data source product
export const UpdateDataSourceProduct = ({ id, ...props }: UpdateDataSourceProductProps) => (
  <Mutate<DataSourceProduct, unknown, void, DataSourceProduct>
    verb="PUT"
    path={`/dataSourceProducts/${id}`}
    {...props}
  />
);

export type ListLibsProps = Omit<GetProps<string[], unknown, void>, "path"> & { id: string };

// List Data Source product files
export const ListLibs = ({ id, ...props }: ListLibsProps) => (
  <Get<string[], unknown, void> path={`/dataSourceProducts/${id}/lib`} {...props} />
);

export type DeleteLibProps = Omit<MutateProps<void, unknown, void, void>, "path" | "verb"> & { id: string };

// Delete data source product file
export const DeleteLib = ({ id, ...props }: DeleteLibProps) => (
  <Mutate<void, unknown, void, void> verb="DELETE" path={`/dataSourceProducts/${id}/lib`} {...props} />
);

export type PutLibProps = Omit<MutateProps<void, unknown, void, string>, "path" | "verb"> & {
  id: string;
  name: string;
};

// Upload data source product file
export const PutLib = ({ id, name, ...props }: PutLibProps) => (
  <Mutate<void, unknown, void, string> verb="PUT" path={`/dataSourceProducts/${id}/lib/${name}`} {...props} />
);

export type GetIconDataSourceProductsPngProps = Omit<GetProps<void, unknown, void>, "path"> & { id: string };

// Get data source product icon
export const GetIconDataSourceProductsPng = ({ id, ...props }: GetIconDataSourceProductsPngProps) => (
  <Get<void, unknown, void> path={`/dataSourceProducts/${id}/png`} {...props} />
);

export type UpdateIconDataSourceProductsPngProps = Omit<MutateProps<void, unknown, void, void>, "path" | "verb"> & {
  id: string;
};

// Upload data source product icon
export const UpdateIconDataSourceProductsPng = ({ id, ...props }: UpdateIconDataSourceProductsPngProps) => (
  <Mutate<void, unknown, void, void> verb="PUT" path={`/dataSourceProducts/${id}/png`} {...props} />
);

export type TestConnectionDataSourceProductProps = Omit<
  MutateProps<ConnectionTestResult, unknown, void, { [key: string]: string }>,
  "path" | "verb"
> & { id: string };

// Test connection for data source product
export const TestConnectionDataSourceProduct = ({ id, ...props }: TestConnectionDataSourceProductProps) => (
  <Mutate<ConnectionTestResult, unknown, void, { [key: string]: string }>
    verb="POST"
    path={`/dataSourceProducts/${id}/testConnection`}
    {...props}
  />
);

export type ListPermissionsDataSourceProductsProps = Omit<GetProps<PermissionTO[], unknown, void>, "path"> & {
  resId: string;
};

// List data source product permissions
export const ListPermissionsDataSourceProducts = ({ resId, ...props }: ListPermissionsDataSourceProductsProps) => (
  <Get<PermissionTO[], unknown, void> path={`/dataSourceProducts/${resId}/permissions`} {...props} />
);

export type CreatePermissionDataSourceProductProps = Omit<
  MutateProps<PermissionTO, unknown, void, PermissionTO>,
  "path" | "verb"
> & { resId: string };

// Create data source product permission
export const CreatePermissionDataSourceProduct = ({ resId, ...props }: CreatePermissionDataSourceProductProps) => (
  <Mutate<PermissionTO, unknown, void, PermissionTO>
    verb="POST"
    path={`/dataSourceProducts/${resId}/permissions`}
    {...props}
  />
);

export type DeletePermissionDataSourceProductProps = Omit<MutateProps<void, unknown, void, void>, "path" | "verb"> & {
  resId: string;
};

// Delete data source product permission
export const DeletePermissionDataSourceProduct = ({ resId, ...props }: DeletePermissionDataSourceProductProps) => (
  <Mutate<void, unknown, void, void> verb="DELETE" path={`/dataSourceProducts/${resId}/permissions`} {...props} />
);

export type FindPermissionDataSourceProductProps = Omit<GetProps<PermissionTO, unknown, void>, "path"> & {
  resId: string;
  id: string;
};

// Get data source product permissions
export const FindPermissionDataSourceProduct = ({ resId, id, ...props }: FindPermissionDataSourceProductProps) => (
  <Get<PermissionTO, unknown, void> path={`/dataSourceProducts/${resId}/permissions/${id}`} {...props} />
);

export type UpdatePermissionDataSourceProductProps = Omit<
  MutateProps<PermissionTO, unknown, void, PermissionTO>,
  "path" | "verb"
> & { resId: string; id: string };

// Update data source product permission
export const UpdatePermissionDataSourceProduct = ({ resId, id, ...props }: UpdatePermissionDataSourceProductProps) => (
  <Mutate<PermissionTO, unknown, void, PermissionTO>
    verb="PUT"
    path={`/dataSourceProducts/${resId}/permissions/${id}`}
    {...props}
  />
);
